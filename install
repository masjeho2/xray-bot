rm -rf install
clear
NC='\e[0m'
DEFBOLD='\e[39;1m'
RB='\e[31;1m'
GB='\e[32;1m'
YB='\e[33;1m'
BB='\e[34;1m'
MB='\e[35;1m'
CB='\e[35;1m'
WB='\e[37;1m'
secs_to_human() {
echo -e "${WB}Installation time : $(( ${1} / 3600 )) hours $(( (${1} / 60) % 60 )) minute's $(( ${1} % 60 )) seconds${NC}"
}
start=$(date +%s)
GIHUB_REPO=raw.githubusercontent.com/masjeho2/conf
apt update -y
apt full-upgrade -y
apt dist-upgrade -y
apt install socat curl screen cron screenfetch netfilter-persistent vnstat lsof fail2ban -y
apt install sysstat -y
apt install jq -y

mkdir /backup > /dev/null 2>&1
mkdir /user > /dev/null 2>&1
mkdir /tmp > /dev/null 2>&1
clear
vnstat --remove -i eth1 --force
clear
rm /usr/local/etc/xray/city > /dev/null 2>&1
rm /usr/local/etc/xray/org > /dev/null 2>&1
rm /usr/local/etc/xray/timezone > /dev/null 2>&1
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" - install --beta
cp /usr/local/bin/xray /backup/xray.official.backup
curl -s ipinfo.io/city >> /usr/local/etc/xray/city
curl -s ipinfo.io/org | cut -d " " -f 2-10 >> /usr/local/etc/xray/org
curl -s ipinfo.io/timezone >> /usr/local/etc/xray/timezone
clear

sleep 0.5
wget -q -O /backup/xray.mod.backup "https://github.com/dharak36/Xray-core/releases/download/v1.0.0/xray.linux.64bit"

sleep 1
curl -L -o /usr/local/share/xray/geoip.dat https://github.com/malikshi/v2ray-rules-dat/releases/latest/download/geoip.dat
curl -L -o /usr/local/share/xray/geosite.dat https://github.com/malikshi/v2ray-rules-dat/releases/latest/download/geosite.dat
sleep 1
cd
clear
apt-get install lolcat -y
clear

#curl -s https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | bash
#apt-get install speedtest

clear
ln -fs /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

add-apt-repository ppa:vbernat/haproxy-2.8 -y
apt update
apt install haproxy -y
mkdir -p /etc/haproxy/certs
clear


apt-get install gnupg
curl -fsSL https://pgp.mongodb.com/server-7.0.asc | \
    gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \
   --dearmor


echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
apt-get update
apt-get install -y mongodb-database-tools

curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
apt install nodejs -y


rm /var/www/html/*.html
rm /etc/haproxy/sites-enabled/default
rm /etc/haproxy/sites-available/default
mkdir -p /var/www/html/vmess
mkdir -p /var/www/html/vless
mkdir -p /var/www/html/trojan
mkdir -p /var/www/html/shadowsocks
mkdir -p /var/www/html/shadowsocks2022
mkdir -p /var/www/html/socks5
mkdir -p /var/www/html/allxray
#systemctl restart haproxy
clear
touch /usr/local/etc/xray/domain
echo -e "${YB}Input Domain${NC} "
echo " "
read -rp "Input your domain : " -e dns
if [ -z $dns ]; then
echo -e "Nothing input for domain!"
else
echo "$dns" > /usr/local/etc/xray/domain
echo "DNS=$dns" > /var/lib/dnsvps.conf
fi
clear
systemctl stop haproxy
domain=$(cat /usr/local/etc/xray/domain)
curl https://get.acme.sh | sh
source ~/.bashrc
cd .acme.sh
bash acme.sh --issue -d $domain --server letsencrypt --keylength ec-256 --fullchain-file /usr/local/etc/xray/fullchain.crt --key-file /usr/local/etc/xray/private.key --standalone --force
cat /usr/local/etc/xray/fullchain.crt /usr/local/etc/xray/private.key > /etc/haproxy/certs/domain.pem
clear
echo -e "${GB}[ INFO ]${NC} ${YB}Setup haproxy & Xray Conf${NC}"

mkdir -p /usr/local/etc/xray/adminenv
mkdir -p /usr/local/etc/xray/agentenv
wget -q -O /usr/local/etc/xray/config.json https://raw.githubusercontent.com/masjeho2/xray-bot/v1/config.json
wget -q -O /etc/haproxy/haproxy.cfg https://raw.githubusercontent.com/masjeho2/xray-bot/v1/haproxy.cfg
wget -q -O /var/www/html/robots.txt https://raw.githubusercontent.com/masjeho2/conf/main/robots.txt
wget -q -O /usr/local/etc/xray/package.json https://raw.githubusercontent.com/masjeho2/xray-bot/v1/package.json
wget -q -O /usr/local/etc/xray/adminenv https://raw.githubusercontent.com/masjeho2/xray-bot/v1/adminenv/.env
wget -q -O /usr/local/etc/xray/agenenv https://raw.githubusercontent.com/masjeho2/xray-bot/v1/agenenv/.env
wget -q -O /usr/local/etc/xray/bot-admin https://github.com/masjeho2/xray-bot/releases/download/v1.0.0/bot-admin
wget -q -O /usr/local/etc/xray/bot-agent https://github.com/masjeho2/xray-bot/releases/download/v1.0.0/bot-agent
#systemctl restart haproxy
systemctl restart xray
echo -e "${GB}[ INFO ]${NC} ${YB}Setup Done${NC}"
sleep 2
clear
iptables -A FORWARD -m string --string "get_peers" --algo bm -j DROP
iptables -A FORWARD -m string --string "announce_peer" --algo bm -j DROP
iptables -A FORWARD -m string --string "find_node" --algo bm -j DROP
iptables -A FORWARD -m string --algo bm --string "BitTorrent" -j DROP
iptables -A FORWARD -m string --algo bm --string "BitTorrent protocol" -j DROP
iptables -A FORWARD -m string --algo bm --string "peer_id=" -j DROP
iptables -A FORWARD -m string --algo bm --string ".torrent" -j DROP
iptables -A FORWARD -m string --algo bm --string "announce.php?passkey=" -j DROP
iptables -A FORWARD -m string --algo bm --string "torrent" -j DROP
iptables -A FORWARD -m string --algo bm --string "announce" -j DROP
iptables -A FORWARD -m string --algo bm --string "info_hash" -j DROP
iptables-save > /etc/iptables.up.rules
iptables-restore -t < /etc/iptables.up.rules
netfilter-persistent save
netfilter-persistent reload
# Mengganti atau menambahkan entri di /etc/security/limits.conf
sed -i '/^\*.*soft.*nofile/s/.*/* soft nofile 1000000/' /etc/security/limits.conf
grep -q '^\*.*soft.*nofile' /etc/security/limits.conf || echo "* soft nofile 1000000" >> /etc/security/limits.conf

sed -i '/^\*.*hard.*nofile/s/.*/* hard nofile 1000000/' /etc/security/limits.conf
grep -q '^\*.*hard.*nofile' /etc/security/limits.conf || echo "* hard nofile 1000000" >> /etc/security/limits.conf

sed -i '/^\*.*soft.*nproc/s/.*/* soft nproc 1000000/' /etc/security/limits.conf
grep -q '^\*.*soft.*nproc' /etc/security/limits.conf || echo "* soft nproc 1000000" >> /etc/security/limits.conf

sed -i '/^\*.*hard.*nproc/s/.*/* hard nproc 1000000/' /etc/security/limits.conf
grep -q '^\*.*hard.*nproc' /etc/security/limits.conf || echo "* hard nproc 1000000" >> /etc/security/limits.conf

# Menambahkan entri di /etc/pam.d/common-session jika belum ada
grep -q '^session\s\+required\s\+pam_limits.so' /etc/pam.d/common-session || echo "session required pam_limits.so" >> /etc/pam.d/common-session

# Menambahkan entri di /etc/pam.d/common-session-noninteractive jika belum ada
grep -q '^session\s\+required\s\+pam_limits.so' /etc/pam.d/common-session-noninteractive || echo "session required pam_limits.so" >> /etc/pam.d/common-session-noninteractive

ulimit -n 1000000
ulimit -u 100000


echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
sed -i '/fs.file-max/d' /etc/sysctl.conf
sed -i '/fs.inotify.max_user_instances/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_syncookies/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_fin_timeout/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_tw_reuse/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_max_syn_backlog/d' /etc/sysctl.conf
sed -i '/net.ipv4.ip_local_port_range/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_max_tw_buckets/d' /etc/sysctl.conf
sed -i '/net.ipv4.route.gc_timeout/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_synack_retries/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_syn_retries/d' /etc/sysctl.conf
sed -i '/net.core.somaxconn/d' /etc/sysctl.conf
sed -i '/net.core.netdev_max_backlog/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_timestamps/d' /etc/sysctl.conf
sed -i '/net.ipv4.tcp_max_orphans/d' /etc/sysctl.conf
sed -i '/net.ipv4.ip_forward/d' /etc/sysctl.conf
echo "fs.file-max = 1000000
fs.inotify.max_user_instances = 8192
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_tw_reuse = 1
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.tcp_max_syn_backlog = 16384
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.route.gc_timeout = 100
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_synack_retries = 1
net.core.somaxconn = 32768
net.core.netdev_max_backlog = 32768
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_max_orphans = 32768
net.ipv4.ip_forward = 1" >> /etc/sysctl.conf


#systemctl restart haproxy

cat > /etc/systemd/system/bot-admin.service << END
[Unit]
Description=bot admin
After=network.target

[Service]
ExecStart=/usr/local/etc/xray/bot-admin
Restart=always
RestartSec=5
User=root

[Install]
WantedBy=multi-user.target
END
cat > /etc/systemd/system/bot-agent.service << END
[Unit]
Description=bot agent
After=network.target
[Service]
ExecStart=/usr/local/etc/xray/bot-agent
Restart=always
RestartSec=5
User=root
[Install]
WantedBy=multi-user.target
END

cd /usr/bin
echo -e "${GB}[ INFO ]${NC} ${YB}Downloading Main Menu${NC}"
wget -q -O /usr/bin/menu "https://raw.githubusercontent.com/masjeho2/v1/xray/menu/menu.sh"


sleep 0.5
echo -e "${GB}[ INFO ]${NC} ${YB}Downloading Other Menu${NC}"

wget -q -O /usr/bin/dns "https://raw.githubusercontent.com/masjeho2/v1/xray/other/dns.sh"
wget -q -O /usr/bin/certxray "https://raw.githubusercontent.com/masjeho2/v1/xray/other/certxray.sh"
wget -q -O /usr/bin/xraymod "https://raw.githubusercontent.com/masjeho2/v1/xray/other/xraymod.sh"
wget -q -O /usr/bin/xrayofficial "https://raw.githubusercontent.com/masjeho2/v1/xray/other/xrayofficial.sh"
wget -q -O /usr/bin/about "https://raw.githubusercontent.com/masjeho2/v1/xray/other/about.sh"
wget -q -O /usr/bin/clear-log "https://raw.githubusercontent.com/masjeho2/v1/xray/other/clear-log.sh"

echo -e "${GB}[ INFO ]${NC} ${YB}Download All Menu Done${NC}"
sleep 2









clearecho -e "${GB}[ INFO ]${NC} ${YB}Setting Permission${NC}"
chmod +x /usr/local/etc/xray/bot-admin
chmod +x /usr/local/etc/xray/bot-agent
chmod +x /usr/bin/dns
chmod +x /usr/bin/certxray
chmod +x /usr/bin/xraymod
chmod +x /usr/bin/xrayofficial
chmod +x /usr/bin/about
chmod +x /usr/bin/clear-log
chmod +x /usr/bin/menu
cd

echo "*/5 * * * * root clear-log" >> /etc/crontab

echo "0 0 */7 * * root curl -L -o /usr/local/share/xray/geoip.dat https://github.com/malikshi/v2ray-rules-dat/releases/latest/download/geoip.dat && curl -L -o /usr/local/share/xray/geosite.dat https://github.com/malikshi/v2ray-rules-dat/releases/latest/download/geosite.dat && systemctl restart xray" >> /etc/crontab
systemctl daemon-reload
systemctl restart cron
systemctl enable bot-admin
systemctl enable bot-agent
systemctl enable haproxy
systemctl enable xray
#systemctl start bot-admin
#systemctl start bot-agent
systemctl start haproxy
systemctl start xray
systemctl restart haproxy
systemctl restart xray
#systemctl restart bot-admin
#systemctl restart bot-agent
clear


echo -e "${GB}[ INFO ]${NC} ${YB}Setting Permission Done${NC}"
sleep 2
cd /usr/local/etc/xray
npm install
npm install -g pm2
cd

echo -e "${GB}[ INFO ]${NC} ${YB}Setting Profile${NC}"
cat > /root/.profile << END
if [ "$BASH" ]; then
if [ -f ~/.bashrc ]; then
. ~/.bashrc
fi
fi
mesg n || true
clear

# Display system information using neofetch
neofetch

# Prompt user to type "menu"
echo "Please type 'menu' to continue."
END
chmod 644 /root/.profile
clear
echo ""
echo ""
echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | lolcat -a -d 10   
echo ""
echo -e "                ${WB}PREMIUM SCRIPT${NC}"
echo ""
echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | lolcat -a -d 10 
echo -e "  ${WB}»»» Protocol Service «««  |  »»» Network Protocol «««${NC}  "
echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | lolcat -a -d 10 
echo -e "  ${YB}- Vless${NC}                   ${WB}|${NC}  ${YB}- Websocket (CDN) non TLS${NC}"
echo -e "  ${YB}- Vmess${NC}                   ${WB}|${NC}  ${YB}- Websocket (CDN) TLS${NC}"
echo -e "  ${YB}- Trojan${NC}                  ${WB}|${NC}  ${YB}- gRPC (CDN) TLS${NC}"
echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | lolcat -a -d 10 
echo -e "               ${WB}»»» Network Port Service «««${NC}             "
echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | lolcat -a -d 10 
echo -e "  ${YB}- HTTPS : 443 ${NC}"
echo -e "  ${YB}- HTTP  : 80 ${NC}"
echo -e "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━" | lolcat -a -d 10 
echo ""
rm -f install
secs_to_human "$(($(date +%s) - ${start}))"
echo -e "${YB}[ WARNING ] reboot now ? (Y/N)${NC} "
read answer
if [ "$answer" == "${answer#[Yy]}" ] ;then
exit 0
else
reboot
fi
